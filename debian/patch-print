--- texworks-0.0.1~svn337.orig/src/TeXDocument.h
+++ texworks-0.0.1~svn337/src/TeXDocument.h
@@ -127,6 +127,7 @@
 public slots:
 	void typeset();
 	void interrupt();
+	void print();
 	void newFile();
 	void newFromTemplate();
 	void open();
--- texworks-0.0.1~svn337.orig/src/PDFDocument.cpp
+++ texworks-0.0.1~svn337/src/PDFDocument.cpp
@@ -49,6 +49,11 @@
 #include <QFileSystemWatcher>
 #include <QDebug>
 #include <QToolTip>
+#include <QPrinter>
+#include <QPrintDialog>
+#include <QPrintEngine>
+#include <QBuffer>
+#include <QProgressDialog>
 
 #include <math.h>
 
@@ -1131,6 +1136,7 @@
 	connect(actionNew, SIGNAL(triggered()), qApp, SLOT(newFile()));
 	connect(actionNew_from_Template, SIGNAL(triggered()), qApp, SLOT(newFromTemplate()));
 	connect(actionOpen, SIGNAL(triggered()), qApp, SLOT(open()));
+	connect(actionPrintPDF, SIGNAL(triggered()), this, SLOT(print()));
 
 	connect(actionQuit_TeXworks, SIGNAL(triggered()), TWApp::instance(), SLOT(maybeQuit()));
 
@@ -1711,3 +1717,203 @@
 	}
 }
 
+void PDFDocument::print()
+{
+	QPrinter printer(QPrinter::HighResolution);
+	QPrintDialog printDlg(&printer, this);
+	QPainter painter;
+	QProgressDialog progressDlg(this);
+	Poppler::Page * page;
+	QImage pageImage;
+	QRect viewport;
+	int dpiX, dpiY;
+	double dpiXScale = 1.0, dpiYScale = 1.0;
+	double scale;
+	unsigned int firstPage, lastPage, i;
+	bool success = false;
+	
+	// check if there's a pdf document to print
+	if(!document) return;
+
+	// check if we have permission to print the document
+	if(!document->okToPrint()) {
+		QMessageBox::critical(this, tr("Printing denied"), tr("You are not permitted to print this document"));
+		return;
+	}
+	
+	// Set up some basic information about the document
+	printer.setCreator(TEXWORKS_NAME);
+	printer.setDocName(document->info("Title"));
+	if(printer.docName().isEmpty()) printer.setDocName(QFileInfo(curFile).baseName());
+	
+	// do some setup for the print dialog
+	printDlg.setMinMax(1, document->numPages());
+	printDlg.setOption(QAbstractPrintDialog::PrintToFile, true);
+	printDlg.setOption(QAbstractPrintDialog::PrintSelection, false);
+	printDlg.setOption(QAbstractPrintDialog::PrintPageRange, true);
+	printDlg.setOption(QAbstractPrintDialog::PrintCollateCopies, true);
+	printDlg.setWindowTitle(tr("Print %1").arg(QFileInfo(curFile).fileName()));
+	
+	// show the print dialog to the user
+	if(printDlg.exec() != QDialog::Accepted) return;
+
+	// determine the print range
+	switch(printDlg.printRange()) {
+		case QAbstractPrintDialog::PageRange:
+			firstPage = printDlg.fromPage();
+			lastPage = printDlg.toPage();
+			break;
+		default:
+			firstPage = 1;
+			lastPage = document->numPages();
+	}
+
+	// On *nix-like platforms, try using lp for printing
+	#if defined(Q_WS_X11) || defined(Q_WS_MAC)
+	// Catch empty printer names (e.g. used by CUPS for "printing to pdf")
+	if(!printer.printerName().isEmpty()) {
+		QStringList arguments;
+		
+		arguments << "lp";
+		
+		arguments << QString("-d %1").arg(printer.printerName());
+		arguments << QString("-n %1").arg(printer.numCopies());
+		arguments << QString("-t \"%1\"").arg(printer.docName());
+		arguments << QString("-P %1-%2").arg(firstPage).arg(lastPage);
+
+		switch(printer.duplex()) {
+			case QPrinter::DuplexNone:
+				arguments << "-o sides=one-sided";
+				break;
+			case QPrinter::DuplexShortSide:
+				arguments << "-o sides=two-sided-short-edge";
+				break;
+			case QPrinter::DuplexLongSide:
+				arguments << "-o sides=two-sided-long-edge";
+				break;
+			default:
+				break;
+		}
+		arguments << "--";
+
+		arguments << QString("\"%1\"").arg(curFile);
+		
+		// passing arguments as QStringList didn't work for me - probably
+		// because of improper quoting of spaces
+		if(QProcess::execute(arguments.join(" ")) == 0) return;
+	}
+	#endif // On *nix, try using lpr for printing
+	
+	// On Windows, try using OS native operation
+	#if defined(Q_WS_WIN)
+	{
+		// First try: directly passing postscript to the printer (if supported)
+		// I'm not sure if this is supported anywhere
+		// Note: QPrinter::getDC and QPrinter::releaseDC are undocumented
+		HDC dc;
+		Poppler::PSConverter * psConv;
+		
+		dc = printer.getDC();
+		
+		if(dc) {
+			int nEscapeCode = POSTSCRIPT_PASSTHROUGH;
+			if(ExtEscape(dc, QUERYESCSUPPORT, sizeof(int), (LPCSTR)&nEscapeCode, 0, NULL ) > 0 && (psConv = document->psConverter())) {
+				// Convert the pdf to postscript instructions
+				QBuffer buffer;
+				
+				buffer.open(QBuffer::ReadWrite);
+				psConv->setOutputDevice(&buffer);
+				psConv->convert();
+				
+				// and send them to the printer
+				success = (ExtEscape(dc, POSTSCRIPT_PASSTHROUGH, buffer.data().size(), buffer.data().data(), 0, NULL) > 0);
+				
+				buffer.close();
+			}
+			printer.releaseDC(dc);
+			if(success) return;
+		}
+		// Second try: print by calling the system's standard printing program for pdf
+		// Seems to only print to the default printer, hence disabled for now
+/*
+		wchar_t * filename;
+		HRESULT coInit;
+		filename = new wchar_t[curFile.size()];
+
+		curFile.toWCharArray(filename);
+		coInit = CoInitializeEx(NULL, COINIT_APARTMENTTHREADED | COINIT_DISABLE_OLE1DDE);
+		if(coInit == S_OK || coInit == S_FALSE) {
+			success = ((int)ShellExecute(NULL, L"print", filename, NULL, NULL, SW_NORMAL) > 32);
+			CoUninitialize();
+		}
+		delete[] filename;
+		if(success) return;
+*/
+	}
+	#endif // On Windows, try using OS native operation
+	
+	// Fallback: use Qt for printing
+	//
+	// This means rendering the pages as images via poppler and printing those
+	// To keep the rendering time and file size reasonable, resolution is
+	// clamped to a maximum of 300dpi. If you need more, use another program ;).
+
+	{
+		// ignore printer margins while painting - the margins are included in the
+		// pdf file
+		printer.setFullPage(true);
+	
+		painter.begin(&printer);
+		viewport = painter.viewport();
+	
+		dpiX = printer.printEngine()->metric(QPaintDevice::PdmDpiX);
+		dpiY = printer.printEngine()->metric(QPaintDevice::PdmDpiY);
+	
+		// clamp the resolution to 300 dpi (postscript devices return 1200 dpi to
+		// Qt by default) to reduce file size and render time
+		dpiXScale = qMax(1, dpiX / 300);
+		dpiYScale = qMax(1, dpiY / 300);
+		dpiX = qMin(300, dpiX);
+		dpiY = qMin(300, dpiY);
+
+		progressDlg.setAutoClose(true);
+		progressDlg.setRange(firstPage, lastPage + 1);
+		progressDlg.setWindowModality(Qt::WindowModal);
+		for(i = firstPage; i <= lastPage && !progressDlg.wasCanceled(); ++i) {
+			progressDlg.setValue(i - firstPage);
+			progressDlg.setLabelText(tr("Printing page %1 of %2").arg(i - firstPage + 1).arg(lastPage - firstPage + 1));
+
+			page = document->page(i - 1);
+			if(page) {
+				pageImage = page->renderToImage(dpiX, dpiY);
+				painter.save();
+			
+				// calculate the scale factor necessary to resize the page image to
+				// the real page while retaining the aspect ratio
+				scale = qMin((double)viewport.width() / (dpiXScale * pageImage.width()), (double)viewport.height() / (dpiYScale * pageImage.height()));
+			
+				// if we need to shrink the page, so be it
+				if(scale < 1) {
+					painter.scale(scale, scale);
+				}
+				// otherwise center the page image on the page
+				// TODO: handle landscape etc.
+				else {
+					painter.translate( (viewport.width() - dpiXScale * pageImage.width()) / 2, (viewport.height() - dpiYScale * pageImage.height()) / 2);
+				}
+				painter.scale(dpiXScale, dpiYScale);
+			
+				painter.drawImage(0, 0, pageImage);
+			
+				painter.restore();
+			}
+		
+			if(i != lastPage) printer.newPage();
+		}
+		
+		if(progressDlg.wasCanceled()) printer.abort();
+		else painter.end();
+		
+		progressDlg.reset();
+	}
+}
--- texworks-0.0.1~svn337.orig/src/TeXDocument.ui
+++ texworks-0.0.1~svn337/src/TeXDocument.ui
@@ -163,7 +163,7 @@
      <x>0</x>
      <y>0</y>
      <width>780</width>
-     <height>22</height>
+     <height>25</height>
     </rect>
    </property>
    <widget class="QMenu" name="menuFile">
@@ -180,6 +180,7 @@
     <addaction name="actionSave_As"/>
     <addaction name="actionSave_All"/>
     <addaction name="actionRevert_to_Saved"/>
+    <addaction name="actionPrintSource"/>
     <addaction name="separator"/>
     <addaction name="actionRemove_Aux_Files"/>
     <addaction name="separator"/>
@@ -1096,6 +1097,18 @@
     <enum>QAction::NoRole</enum>
    </property>
   </action>
+  <action name="actionPrintSource">
+   <property name="icon">
+    <iconset resource="../res/resources.qrc">
+     <normaloff>:/images/tango/document-print.png</normaloff>:/images/tango/document-print.png</iconset>
+   </property>
+   <property name="text">
+    <string>Print</string>
+   </property>
+   <property name="shortcut">
+    <string>Ctrl+P</string>
+   </property>
+  </action>
  </widget>
  <customwidgets>
   <customwidget>
--- texworks-0.0.1~svn337.orig/src/TeXDocument.cpp
+++ texworks-0.0.1~svn337/src/TeXDocument.cpp
@@ -58,6 +58,8 @@
 #include <QPushButton>
 #include <QFileSystemWatcher>
 #include <QDebug>
+#include <QPrinter>
+#include <QPrintDialog>
 
 #ifdef Q_WS_WIN
 #include <windows.h>
@@ -169,6 +171,7 @@
 	connect(actionSave_All, SIGNAL(triggered()), this, SLOT(saveAll()));
 	connect(actionRevert_to_Saved, SIGNAL(triggered()), this, SLOT(revert()));
 	connect(actionClose, SIGNAL(triggered()), this, SLOT(close()));
+	connect(actionPrintSource, SIGNAL(triggered()), this, SLOT(print()));
 
 	connect(actionRemove_Aux_Files, SIGNAL(triggered()), this, SLOT(removeAuxFiles()));
 
@@ -2866,3 +2869,26 @@
 		pdfDoc = NULL;
 	}
 }
+
+void TeXDocument::print()
+{
+	QPrinter printer(QPrinter::HighResolution);
+	QPrintDialog printDlg(&printer, this);
+
+	// Set up some basic information about the document
+	printer.setCreator(TEXWORKS_NAME);
+	printer.setDocName(QFileInfo(curFile).baseName());
+
+	// do some setup for the print dialog
+	// Note: no page range since we don't know how many pages this will be.
+	printDlg.setOption(QAbstractPrintDialog::PrintToFile, true);
+	printDlg.setOption(QAbstractPrintDialog::PrintSelection, true);
+	printDlg.setOption(QAbstractPrintDialog::PrintPageRange, false);
+	printDlg.setOption(QAbstractPrintDialog::PrintCollateCopies, true);
+	printDlg.setWindowTitle(tr("Print %1").arg(QFileInfo(curFile).fileName()));
+
+	// show the print dialog to the user
+	if(printDlg.exec() != QDialog::Accepted) return;
+	
+	textEdit->print(&printer);
+}
--- texworks-0.0.1~svn337.orig/src/PDFDocument.ui
+++ texworks-0.0.1~svn337/src/PDFDocument.ui
@@ -23,7 +23,7 @@
      <x>0</x>
      <y>0</y>
      <width>800</width>
-     <height>22</height>
+     <height>25</height>
     </rect>
    </property>
    <widget class="QMenu" name="menuHelp">
@@ -43,6 +43,7 @@
     <addaction name="actionNew_from_Template"/>
     <addaction name="actionOpen"/>
     <addaction name="actionOpen_Recent"/>
+    <addaction name="actionPrintPDF"/>
     <addaction name="separator"/>
     <addaction name="actionClose"/>
     <addaction name="separator"/>
@@ -729,6 +730,18 @@
     <enum>QAction::NoRole</enum>
    </property>
   </action>
+  <action name="actionPrintPDF">
+   <property name="icon">
+    <iconset resource="../res/resources.qrc">
+     <normaloff>:/images/tango/document-print.png</normaloff>:/images/tango/document-print.png</iconset>
+   </property>
+   <property name="text">
+    <string>Print...</string>
+   </property>
+   <property name="shortcut">
+    <string>Ctrl+P</string>
+   </property>
+  </action>
  </widget>
  <resources>
   <include location="../res/resources.qrc"/>
--- texworks-0.0.1~svn337.orig/src/PDFDocument.h
+++ texworks-0.0.1~svn337/src/PDFDocument.h
@@ -251,6 +251,7 @@
 public slots:
 	void texClosed(QObject *obj);
 	void reload();
+	void print();
 	void retypeset();
 	void interrupt();
 	void sideBySide();
--- texworks-0.0.1~svn337.orig/res/resources.qrc
+++ texworks-0.0.1~svn337/res/resources.qrc
@@ -19,6 +19,7 @@
         <file>tango/document-open.png</file>
         <file>images/fileprint.png</file>
         <file>tango/document-save.png</file>
+        <file>tango/document-print.png</file>
         <file>tango/go-first.png</file>
         <file>images/fitwidth.png</file>
         <file>images/fitwindow.png</file>
